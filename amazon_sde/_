/*
79. Word Search
Medium

Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example 1:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Example 2:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true

Example 3:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false

Constraints:
m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of only lowercase and uppercase English letters.
 */
/* Description for first effort below:
Since it's obvious that there will be a lot of repetitive work, such as checking up, down, left, right for lots of characters, we can use recusion to simplify our code.
Our base case will need to check:

are we getting out of boundary? if yes, get out.
are we getting a wrong character? If yes, get out.
did we find every character from the work? If yes, great, we have found this word.
Otherwise keep exploring characters for all directions.
 */
var exist = function(board, word) {
    let result = false;
    var check = function(r, c, i) {
        if (!result) {
            if (r < 0 || c < 0 || r >= board.length || c >= board[0].length) return; // out of boundary
            if (board[r][c] != word[i]) return; // wrong character
            if (i == word.length - 1) { // got to the end means we found a correct path
                result = true;
                return;
            }
            board[r][c] = null; // mark our path so we dont go back and forth
            // try all directions
            check(r+1,c,i+1)
            check(r-1,c,i+1)
            check(r,c+1,i+1)
            check(r,c-1,i+1)
            board[r][c] = word[i] // reset our board , very important
        }
    }

    for (let i=0;i<board.length;i++) {
        for (let j=0;j<board[0].length;j++) {
            if (board[i][j] == word[0]) {
                check(i, j, 0)
                if (result) return result;
            }
        }
    }
    return result;
};
console.log(exist([["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]],"ABCCED"));
console.log(exist([["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]],"SEE"));
console.log(exist([["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]],"ABCB"));

FOR SOME REASON, used code from this reference:
 https://unix.stackexchange.com/questions/444825/move-last-part-of-filename-to-front

 running the below deleted all files and relocated wordSearch_79.js to this file:
brettlohmeier@Bretts-MBP amazon_sde  %
for f in *.js ; do
    if [[ "$f" =~  ^(.*)_(.*)$ ]]; then
        mv "$f" "${BASH_REMATCH[2]}_${BASH_REMATCH[1]}"
    fi
done


NEXT, used this ref:
https://askubuntu.com/questions/960980/move-characters-from-the-start-of-filenames-to-the-end-before-extension-and-ad
to run the below code:
brettlohmeier@Bretts-MBP amazon_sde %
rename -n 's/^([0-9]+) (.*)\.jpg/$2 $1.jpg/' /path/to/files/*.jpg


THIRD:
https://stackoverflow.com/questions/24102974/how-to-batch-rename-files-in-a-macos-terminal
for f in *.js; do echo mv "$f" "${f/_*_/_}"; done

SOLUTION:
https://www.computerhope.com/unix/rename.htm
rename -n 's/(\D+)(\_)(\d+)(\.js)/$3$2$1$4/' *.js

Attempt to re-create the above with 'for' loop:
for f in *.js ; do
    if [[ "$f" =~  ^(.*)_(.*)$ ]]; then
        echo mv "$f" "${BASH_REMATCH[2]}_${BASH_REMATCH[1]}"
    fi
done
FAILED! HAD TO RECOVER:
git reset --hard

SECOND TRY ... SOURCE:
https://unix.stackexchange.com/questions/444825/move-last-part-of-filename-to-front
for f in *.js ; do
    if [[ "$f" =~  ^(.*)_(.*)(\..*)$ ]]; then
        echo mv "$f" "${BASH_REMATCH[2]}_${BASH_REMATCH[1]}${BASH_REMATCH[3]}"
    fi
done
ABOVE: NOT WORKING

for f in *.js ; do
    if [[ "$f" =~  ^(.*)_(.*)(\..*)$ ]]; then
        echo mv "$f" "${BASH_REMATCH[2]}"
    fi
done

NEW ATTEMPT:
https://superuser.com/questions/1622109/shell-how-to-rename-files-in-the-midle-of-file-name
re='^([a-zA-Z]+)(_+)([0-9])+(\.js)$'
if [[ $img =~ $re ]]; then
    newimg=${BASH_REMATCH[2]}_${BASH_REMATCH[1]}
    echo convert "$img" ... "$newimg"
fi

NEXT ATTEMPT: https://www3.ntu.edu.sg/home/ehchua/programming/howto/Regexe.html
re='^([a-zA-Z]+)_([0-9])+(\.js)$'
if [[ $img =~ $re ]]; then
    newimg=${BASH_REMATCH[2]}_${BASH_REMATCH[1]}
    echo convert "$img" ... "$newimg"
fi

